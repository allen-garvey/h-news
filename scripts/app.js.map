{"version":3,"sources":["story.js","comment.js","hn_util.js","stories_controller.js","comments_controller.js","settings.js","app.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxnMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/**\n* Story model\n* Used to get process info about a story such as url, title, and type\n*/\nHN.Story = (function(){\n\n\tfunction HNStory(storyInfo){\n\t\tthis.storyInfo = storyInfo;\n\t};\n\n\tHNStory.prototype.url = function() {\n\t\t//for ask or show HN stories\n\t\tif(this.isLocalHNUrl()){\n\t\t\treturn HN.askUrl + this.storyInfo['id'];\n\t\t}\n\t\treturn this.storyInfo['url'];\n\t};\n\tHNStory.prototype.isLocalHNUrl = function(){\n\t\tif(!this.storyInfo['url']){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\n\t/**\n\t* gets the url root domain for display with story\n\t* http://www.nytimes.com/story becomes (nytimes.com)\n\t*/\n\tHNStory.prototype.urlRoot = function() {\n\t\t//for ask or show HN stories\n\t\tif(this.isLocalHNUrl()){\n\t\t\treturn ''; \n\t\t}\n\t\t//removes first part of url (http://www.)\n\t\tvar base_url = this.url();\n\t\tbase_url =  base_url.replace(/^http(s)?:\\/\\/(www.)?/, '');\n\t\t//removes subfolders from url (/index.html)\n\t\tbase_url = base_url.replace(/\\/.*$/, '');\n\t\t//removes get requests from url (?q=something)\n\t\treturn '(' + base_url.replace(/\\?.*$/,'') + ')';\n\t};\n\tHNStory.prototype.title = function(){\n\t\treturn this.storyInfo['title'] || '';\n\t};\n\tHNStory.prototype.text = function(){\n\t\treturn this.storyInfo['text'] || '';\n\t};\n\tHNStory.prototype.author = function(){\n\t\treturn this.storyInfo['by'] || '';\n\t};\n\tHNStory.prototype.storyType = function(){\n\t\tif(this.type() !== 'story'){\n\t\t\treturn false;\n\t\t}\n\t\tif(this.isLocalHNUrl()){\n\t\t\tif(this.title().substring(0,3).toLowerCase() === 'ask'){\n\t\t\t\treturn 'ask';\n\t\t\t}\n\t\t\treturn 'show';\n\t\t}\n\t\treturn 'story';\n\t};\n\tHNStory.prototype.type = function(){\n\t\treturn this.storyInfo['type'];\n\t};\n\tHNStory.prototype.numComments = function(){\n\t\tif(!this.storyInfo['descendants']){\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.storyInfo['descendants'];\n\t};\n\tHNStory.prototype.getTopLevelCommentsIds = function(){\n\t\tif(!this.storyInfo['kids']){\n\t\t\treturn [];\n\t\t}\n\t\treturn this.storyInfo['kids'];\n\t};\n\tHNStory.prototype.commentsUrl = function(){\n\t\t// return 'https://news.ycombinator.com/item?id=' + this.storyInfo['id'];\n\t\treturn HN.commentsUrl + this.storyInfo['id'];\n\t};\n\treturn HNStory;\n})();\n","/**\n* Comment model\n* Used to get process info about a comment such as kids and parent id\n*/\n\nHN.Comment = (function(){\n\n\tfunction HNComment(commentInfo){\n\t\tthis.commentInfo = commentInfo;\n\t}\n\tHNComment.prototype.isDeleted = function(){\n\t\tif(this.commentInfo['deleted'] === true){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\tHNComment.prototype.children = function(){\n\t\treturn this.commentInfo['kids'];\n\t}\n\tHNComment.prototype.parentId = function(){\n\t\treturn this.commentInfo['parent'];\n\t}\n\tHNComment.prototype.text = function(){\n\t\treturn this.commentInfo['text'];\n\t}\n\tHNComment.prototype.author = function(){\n\t\treturn this.commentInfo['by'];\n\t}\n\tHNComment.prototype.commentId = function(){\n\t\treturn this.commentInfo['id'];\n\t}\n\t\n\tHNComment.prototype.numChildren = function(){\n\t\tif(!this.children()){\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.children().length;\n\t}\n\n\treturn HNComment;\n})();","/**\n* used to story shared functions used in story and comments pages\n*/\nHN.util = {};\n/**\n\t\t* returns object of info about a story based on integer id\n\t\t* id\t\tThe item's unique id.\n\t\t* deleted\ttrue if the item is deleted.\n\t\t* type\t\tThe type of item. One of \"job\", \"story\", \"comment\", \"poll\", or \"pollopt\".\n\t\t* by\t\tThe username of the item's author.\n\t\t* time\t\tCreation date of the item, in Unix Time.\n\t\t* text\t\tThe comment, story or poll text. HTML.\n\t\t* dead\t\ttrue if the item is dead.\n\t\t* parent\tThe item's parent. For comments, either another comment or the relevant story. For pollopts, the relevant poll.\n\t\t* kids\t\tThe ids of the item's comments, in ranked display order.\n\t\t* url\t\tThe URL of the story.\n\t\t* score\t\tThe story's score, or the votes for a pollopt.\n\t\t* title\t\tThe title of the story, poll or job.\n\t\t* parts\t\tA list of related pollopts, in display order.\n\t\t* descendants\tIn the case of stories or polls, the total comment count.\n\t\t*/\nHN.util.getItemInfoUrlFromId = function(id){\n\t\treturn 'https://hacker-news.firebaseio.com/v0/item/' + id + '.json';\n\t};\n/**\n* Takes HN.Story object as a parameter and returns the html to display the title and link\n*/\nHN.util.getStoryTitleHTML = function(story){\n\tvar title = \"<a href='\" + story.url() +\"'><h3>\" + story.title();\n\tif(story.urlRoot() !== ''){\n\t\ttitle += \"<span class='small url_source'> \" + story.urlRoot() + \"</span>\";\n\t}\n\ttitle += \"</h3></a>\";\n\treturn title;\n};\n\n/**\n* Used for ask pages to display without the link\n* Even though code only used on ask pages, is kept here because it should have the same style as getStoryTitleHTML()\n*/\nHN.util.getAskStoryTitle = function(story){\n\treturn \"<h3>\" + story.title() + \"</h3>\";\n};\n\n/**\n* Used for comment HTML text to smarten quotes\n* takes html string and returns html string with dumb quotes replaced with smart quotes\n* preserves dumbquotes in html attributes\n*/\nHN.util.smartenQuotesHTML = function(dumbString){\n\treturn HN.util.replaceSmartQuoteEntities(HN.util.transformTextNodes(dumbString, function(text){\n\t\treturn HN.util.replaceDumbQuotes(text);\n\t}));\n};\n\n/**\n* Used to transform just the textNodes in html\n* used for smarten quotes\n* @element first argument is either the result of document.getElementById() \n* or a string of html such as 'text' or 'text <div>more text</div>' or '<div>text</div>'\n* @textTransformFunc is a function used to transform the text nodes\n* it should be of the format: function(text){return text.toUpperCase();} or however the text is to be transformed\n* @returns either the transformed string if was originally a string or transformed element if was originally an element\n*/\nHN.util.transformTextNodes = function (element, textTransformFunc) {\n    var elementType = typeof element;\n    \n    if(elementType === 'string'){\n        var div = document.createElement('div');\n        div.innerHTML = element;\n        element = div;\n    }\n    try{\n\t    var walker = document.createTreeWalker(\n\t        element, \n\t        NodeFilter.SHOW_TEXT, \n\t        null, \n\t        false\n\t    );\n\t}\n\tcatch(e){\n\t\tconsole.log(e);\n\t\treturn element;\n\t}\n\n    var textNode;\n\n    while(textNode = walker.nextNode()) {\n        textNode.nodeValue = textTransformFunc(textNode.nodeValue);\n    }\n    if(elementType === 'string'){\n        return element.innerHTML;\n    }\n    return element;\n};\n\n/**\n* Used to replace dumb quotes in a text string\n* uses a second replace in the function passed to replace to preserve the non word characters before the quote, such as spaces or parens\n*/\nHN.util.replaceDumbQuotes = function(dumbString){\n\tvar rightSingleSmartQuote = \"&#8217;\";\n\tvar leftSingleSmartQuote = \"&#8216;\";\n\tvar rightDoubleSmartQuote = \"&#8221;\";\n\tvar leftDoubleSmartQuote = \"&#8220;\";\n\tvar emDash = \"&#8212;\";\n\tvar ellipsis = \"&#8230;\";\n\treturn dumbString\n\t\t\t   \t\t .replace(/\\b'|[\\.?,-\\/#!$%\\^&\\*;:{}<>=|\\-_`~()\\[\\]]'/g, function(match, str, offset){return match.replace(/'/g, rightSingleSmartQuote);})\n\t\t       \t\t .replace(/'/g, leftSingleSmartQuote)\n\t\t       \t\t .replace(/\\b\"|[\\.?,-\\/#!$%\\^&\\*;:{}<>|=\\-_`~()\\[\\]]\"/g, function(match, str, offset){return match.replace(/\"/g, rightDoubleSmartQuote);})\n\t\t       \t\t .replace(/\"/g, leftDoubleSmartQuote)\n\t\t       \t\t .replace(/\\D\\s+-+\\s*\\D|\\D\\s*-+\\s+\\D|\\s*--+\\s*/g, function(match, str, offset){return match.replace(/\\s*-+\\s*/g, emDash);})\n\t\t       \t\t .replace(/\\.\\s?\\.\\s?\\.\\s?/g, ellipsis);\n};\n\n/**\n* Required because the treeWalker automatically escapes ampersands\n*/\nHN.util.replaceSmartQuoteEntities = function(string){\n\tif(typeof string != 'string'){\n\t\treturn string;\n\t}\n\treturn string.replace(/&amp;#[\\d]{4};/g, function(match, str, offset){\n\t\treturn match.replace('&amp;', '&');\n\t});\n};\n\n/*\n * Wrapper for ajax\n * \n * @param url - string for url to get request\n * @param success - function to be run on success - takes one argument of the data returned\n * @param failure - function to be run on error - take one argument of error\n * @return null\n */\nHN.getJSON = function(url, success, failure){\n\tvar request = new XMLHttpRequest();\n\trequest.open('GET', url, true);\n\n\trequest.onload = function() {\n\t  if (this.status >= 200 && this.status < 400) {\n\t    var data = JSON.parse(this.response);\n\t    success(data);\n\t  } else {\n\t    // We reached our target server, but it returned an error\n\t    failure(this.response);\n\t  }\n\t};\n\n\trequest.onerror = function() {\n\t  // There was a connection error of some sort\n\t  failure(this.response);\n\t};\n\n\trequest.send();\n};\n\n/*\n * Used to iterate over array or array-like collection (e.g. NodeList)\n * \n * @param collection - collection to be iterated over\n * @param action - anynomous function to be called for each item in collection - arguments are item, and (int) index of item\n * @return null\n */\n\n HN.util.each = function(collection, action){\n \tvar length = collection.length;\n \tfor (var i = 0; i < length; i++) {\n \t\taction(collection[i], i);\n \t};\n };\n\n/*\n* Used for comments to change ycombinator links to hnews links\n*/\nHN.util.redirectLinks = function(){\n\tvar ycombinatorLink = 'https://news.ycombinator.com/item?id=';\n\tvar links = document.querySelectorAll(\"#top_list a[href^='\" + ycombinatorLink + \"']\");\n\tHN.util.each(links, function(link){\n\t\tvar hrefSplit = link.href.split(ycombinatorLink);\n\t\t//make sure it's a comment url\n\t\tif(hrefSplit.length !== 2){\n\t\t\treturn;\n\t\t}\n\t\tvar commentId = hrefSplit[1];\n\t\t//make sure comment id is number\n\t\tif(!commentId.match(/^[0-9]*$/)){\n\t\t\treturn;\n\t\t}\n\t\tvar hnewsUrl = HN.settings.commentsUrl + commentId;\n\t\tlink.setAttribute('href', hnewsUrl);\n\t\tlink.text = hnewsUrl;\n\t});\n};\n","/**\n* used to display homepage, show and ask pages list of story links\n*/\nHN.displayStories = function(){\n\tHN.getJSON(HN.storiesUrl, function(storyIds){getStoryInfo(storyIds);}, function(){console.log(\"Error retrieving story ids\");});\n\n\tfunction getStoryInfo(storyIds){\n\t\tvar top_list = document.getElementById('top_list');\n\t\tfor(var i=0;i<HN.storiesPerPage;i++){\n\t\t\tvar storyInfoUrl = HN.util.getItemInfoUrlFromId(storyIds[i]);\n\t\t\tif(storyInfoUrl){\n\t\t\t\tHN.getJSON(storyInfoUrl, function(storyInfo){\n\t\t\t\t\t\t\t\tif(!storyInfo){\n\t\t\t\t\t\t\t\t\tconsole.log('Story info is: ' + storyInfo + ' for story id: ' + storyIds[i]);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar story = new HN.Story(storyInfo);\n\t\t\t\t\t\t\t\tif(HN.shouldDisplayStory(story)){\n\t\t\t\t\t\t\t\t\ttop_list.insertAdjacentHTML('beforeend', getStoryHTML(story));\n\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t}, \n\t\t\t\t\tfunction(){console.log(\"failed to get info about story: \" + story.id);}\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction getStoryHTML(story){\n\t\tvar html = \"<li><div class='container'>\" + HN.util.getStoryTitleHTML(story);\n\t\tvar num_comments = story.numComments();\n\t\tif(num_comments > 0){\n\t\t\tvar comments_text = ' comment';\n\t\t\tif(num_comments > 1){\n\t\t\t\tcomments_text = ' comments';\n\t\t\t}\n\t\t\thtml = html + \"<a href='\" + story.commentsUrl() +\"'><p>\" + num_comments  + comments_text + \"</p></a>\";\n\t\t}\n\t\thtml = html + \"</div></li>\";\n\t\treturn html;\n\t}\n};\n","/**\n* used to display comment and ask pages\n*/\nHN.clearComments = function(){\n\tdocument.getElementById('content_main').innerHTML = '';\n};\n\nHN.displayComments = function(){\n\tvar storyId = window.location.href.match(/\\d+\\/?$/);\n\tif(storyId){\n\t\tvar storyUrl = 'https://hacker-news.firebaseio.com/v0/item/' + storyId[0] + '.json';\n\t}\n\telse{\n\t\tconsole.log(\"No story id found\");\n\t\treturn;\n\t}\n\tHN.getJSON(storyUrl, function(storyInfo){\n\t\t\tif(!storyInfo){\n\t\t\t\tconsole.log('No info about the story returned');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar story = new HN.Story(storyInfo);\n\t\t\tvar title_class = 'container'\n\t\t\tvar text = story.text();\n\t\t\tvar title = '';\n\t\t\tif(text){\n\t\t\t\ttext = \"<h6>\" + story.author() + \"</h6><article>\" + HN.util.smartenQuotesHTML(story.text())  + \"</article>\";\n\t\t\t\tif(HN.pageName === 'ask' || story.title().match(/^(Ask|Tell) HN:/)){\n\t\t\t\t\ttitle_class += ' ask';\n\t\t\t\t\ttitle = HN.util.getAskStoryTitle(story);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttitle = HN.util.getStoryTitleHTML(story)\n\t\t\t}\n\t\t\tdocument.title = document.title + \" - \" + story.title();\n\t\t\tdocument.getElementById('content_main').insertAdjacentHTML('afterbegin', \"<section class='\" + title_class + \"'>\" + title + text + \"</section>\");\n\t\t\tdisplayAllCommentChildren(story.getTopLevelCommentsIds());\t\n\t\t},\n\n\t\tfunction(){console.log(\"Error retrieving comments\");}\n\t);\n\n\t/**\n\t* displays comment children of an array of comment ids\n\t* if no cssId is given, assumes it is top level comment and creates appropriate jquery cssId object\n\t*/\n\tfunction displayAllCommentChildren(commentIdArray, cssId){\n\t\tif(!commentIdArray){\n\t\t\treturn;\n\t\t}\n\t\tvar isTopLevelComment = !cssId;\n\t\tvar parent_list = cssId ? document.getElementById(cssId) : document.getElementById('top_list');\n\t\tvar numCommentIds = commentIdArray.length;\n\t\tfor (var i = 0; i < numCommentIds; i++) {\n\t\t\tHN.getJSON(HN.util.getItemInfoUrlFromId(commentIdArray[i]), function(commentInfo){\n\t\t\t\t\tdisplayComment(commentInfo, parent_list, isTopLevelComment);\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\tfunction(){console.log(\"Error retrieving info about comment: \" + commentIdArray[i]);}\n\t\t\t);\n\n\t\t};\n\t\t//change hacker news links to hnews links\n\t\tHN.util.redirectLinks();\n\n\t}\n\n\t/**\n\t* displays comment\n\t* parent_list is a dom object that the comment should be appended to\n\t* isTopLevelComment is used for styling purposes, since top level comments are styled different than child comments\n\t*/\n\tfunction displayComment(commentInfo, parent_list, isTopLevelComment){\n\t\tif(!commentInfo){\n\t\t\treturn;\n\t\t}\n\t\tvar comment = new HN.Comment(commentInfo);\n\t\tif(comment.isDeleted()){\n\t\t\tcomment = getDeletedComment(commentInfo);\n\t\t}\n\t\tvar commentHTML = \"<li class='comment'>\";\n\t\tif(isTopLevelComment){\n\t\t\tcommentHTML += \"<div class='container'>\";\n\t\t}\n\t\tcommentHTML += \"<h6>\" + comment.author() + \"</h6><article\";\n\t\tif(comment.isDeleted()){\n\t\t\tcommentHTML += \" class='deleted'\";\t\n\t\t}\n\t\tcommentHTML += \">\" + HN.util.smartenQuotesHTML(comment.text()) + \"</article>\";\n\t\t\n\t\tif(comment.numChildren() > 0){\n\t\t\tcommentHTML += \"<ol id='\" + commentIdToCSSId(comment.commentId()) + \"'></ol>\";\n\t\t}\n\t\tif(isTopLevelComment){\n\t\t\tcommentHTML += \"</div>\";\n\t\t}\n\t\tcommentHTML +=  \"</li>\";\n\n\t\tparent_list.insertAdjacentHTML('beforeend', commentHTML);\n\t\tdisplayAllCommentChildren(comment.children(), commentIdToCSSId(comment.commentId()));\n\t}\n\t\n\t/**\n\t* Returns the correct jquery id cssId for the parent ol to append comment to\n\t*/\n\tfunction commentIdToCSSId(commentId){\n\t\treturn 'comment' + commentId;\n\t}\n\n\t/**\n\t* Returns the text used in place of deleted comments\n\t*/\n\tfunction getDeletedComment(commentInfo){\n\t\tcommentInfo.by = '';\n\t\tcommentInfo.text = '[deleted]'\n\t\treturn new HN.Comment(commentInfo);\n\t}\n};\n\n","HN.settings.LS_AUTODARK_KEY = 'Local Storage Key for automatically changing to dark theme at night';\nHN.settings.LS_USER_THEME_KEY = 'Local Storage Key user selected theme';\n\nHN.settings.initSettingsPage = function(){\n\tvar ls = window.localStorage;\n\tif(ls.getItem(HN.settings.LS_AUTODARK_KEY) === 'true'){\n\t\tdocument.getElementById('autodark_checkbox').checked = true;\n\t}\n\tvar userTheme = HN.settings.getUserTheme();\n\n\tHN.settings.themeNames.map(function(theme) {\n\t\tvar themeRadio = document.getElementById(HN.settings.themeIdPrefix + theme);\n\t\tif(theme === userTheme){\n\t\t\tthemeRadio.checked = true;\n\t\t}\n\t\tthemeRadio.onclick = function(){\n\t\t\tdocument.documentElement.className = theme;\n\t\t};\n\t});\n};\n\nHN.settings.getUserTheme = function(){\n\tvar ls = window.localStorage;\n\tvar userTheme = ls.getItem(HN.settings.LS_USER_THEME_KEY);\n\tif(HN.settings.themeNames.indexOf(userTheme) < 0){\n\t\tuserTheme = HN.settings.themeNames[0];\n\t}\n\treturn userTheme;\n};\n\nHN.settings.initSettings = function(){\n\tdocument.documentElement.className = HN.settings.getUserTheme();\n\tvar ls = window.localStorage;\n\tif(ls.getItem(HN.settings.LS_AUTODARK_KEY) === 'true'){\n\t\tHN.settings.darkAtNight();\n\t}\n};\n\nHN.settings.darkAtNight = function(){\n\tvar currentDate = new Date();\n\tvar currentHour = currentDate.getHours();\n\tif(currentHour >= 22 || currentHour < 6){\n\t\tdocument.documentElement.className = 'dark';\n\t}\n};\n\nHN.settings.save = function(){\n\tvar ls = window.localStorage;\n\tls.setItem(HN.settings.LS_AUTODARK_KEY, document.getElementById('autodark_checkbox').checked);\n\tvar userTheme = document.querySelector('input[name=\"' + HN.settings.userThemeFormName + '\"]:checked').value;\n\tif(HN.settings.themeNames.indexOf(userTheme) >= 0){\n\t\tls.setItem(HN.settings.LS_USER_THEME_KEY, userTheme);\n\t}\n\twindow.location.href = document.querySelector('form').action;\n};","//initialize settings\nHN.settings.initSettings();\n\nif(HN.pageType === 'comments'){\n\t//add listener for if user clicks on comments link while on comments page\n\twindow.addEventListener('hashchange', function(){HN.clearComments(); HN.displayComments();}, false);\n\tHN.displayComments();\n}\nelse if(HN.pageType === 'settings'){\n\tHN.settings.initSettingsPage();\n}\nelse{\n\tHN.displayStories();\n}"],"sourceRoot":"/source/"}